/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FavoriteCarParkService } from "../favoriteCarPark.service";
import { FavoriteCarParkCreateInput } from "./FavoriteCarParkCreateInput";
import { FavoriteCarPark } from "./FavoriteCarPark";
import { FavoriteCarParkFindManyArgs } from "./FavoriteCarParkFindManyArgs";
import { FavoriteCarParkWhereUniqueInput } from "./FavoriteCarParkWhereUniqueInput";
import { FavoriteCarParkUpdateInput } from "./FavoriteCarParkUpdateInput";

export class FavoriteCarParkControllerBase {
  constructor(protected readonly service: FavoriteCarParkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FavoriteCarPark })
  async createFavoriteCarPark(
    @common.Body() data: FavoriteCarParkCreateInput
  ): Promise<FavoriteCarPark> {
    return await this.service.createFavoriteCarPark({
      data: {
        ...data,

        carPark: data.carPark
          ? {
              connect: data.carPark,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        carPark: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FavoriteCarPark] })
  @ApiNestedQuery(FavoriteCarParkFindManyArgs)
  async favoriteCarParks(
    @common.Req() request: Request
  ): Promise<FavoriteCarPark[]> {
    const args = plainToClass(FavoriteCarParkFindManyArgs, request.query);
    return this.service.favoriteCarParks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        carPark: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FavoriteCarPark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async favoriteCarPark(
    @common.Param() params: FavoriteCarParkWhereUniqueInput
  ): Promise<FavoriteCarPark | null> {
    const result = await this.service.favoriteCarPark({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        carPark: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FavoriteCarPark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFavoriteCarPark(
    @common.Param() params: FavoriteCarParkWhereUniqueInput,
    @common.Body() data: FavoriteCarParkUpdateInput
  ): Promise<FavoriteCarPark | null> {
    try {
      return await this.service.updateFavoriteCarPark({
        where: params,
        data: {
          ...data,

          carPark: data.carPark
            ? {
                connect: data.carPark,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          carPark: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FavoriteCarPark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFavoriteCarPark(
    @common.Param() params: FavoriteCarParkWhereUniqueInput
  ): Promise<FavoriteCarPark | null> {
    try {
      return await this.service.deleteFavoriteCarPark({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          carPark: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
